import { z } from 'zod'; import type { QuoteRepo, OrderRepo, Cache, Bus, Queue } from '../../../application/ports.js'; import { CreateQuote, PlaceOrder, GetOrderStatus } from '../../../application/usecases.js'; const CreateQuoteSchema=z.object({partNumber:z.string().min(1), quantity:z.number().int().positive()}); export function buildResolvers(deps:{quotes:QuoteRepo; orders:OrderRepo; cache:Cache; bus:Bus; queue:Queue;}){ const cq=new CreateQuote(deps.quotes, deps.bus); const po=new PlaceOrder(deps.orders, deps.quotes, deps.queue); const gos=new GetOrderStatus(deps.orders, deps.cache); return { Query:{ quote: async(_:any,{id}:{id:string})=>deps.quotes.get(id), order: async(_:any,{id}:{id:string})=>deps.orders.get(id), orderStatus: async(_:any,{id}:{id:string})=>gos.execute({orderId:id}) }, Mutation:{ createQuote: async(_:any,{input}:any)=>{ const parsed=CreateQuoteSchema.parse(input); return cq.execute(parsed); }, placeOrder: async(_:any,{quoteId}:{quoteId:string})=>po.execute({quoteId}) } }; }
