import { pool } from '../../../infrastructure/db/postgres.js'; import type { QuoteRepo, OrderRepo } from '../../../application/ports.js'; import type { Quote, Order, ID } from '../../../domain/entities.js'; import { randomUUID } from 'node:crypto';
export const PostgresQuoteRepo=():QuoteRepo=>({ async get(id:ID){ const r=await pool.query('SELECT id, part_number, quantity, created_at, status FROM quotes WHERE id=$1',[id]); if(r.rowCount===0) return null; const row=r.rows[0]; return {id:row.id, partNumber:row.part_number, quantity:row.quantity, createdAt:row.created_at, status:row.status}; }, async create(q){ const id=randomUUID(); const created_at=new Date(); const status='NEW'; await pool.query('INSERT INTO quotes (id, part_number, quantity, created_at, status) VALUES ($1,$2,$3,$4,$5)',[id,q.partNumber,q.quantity,created_at,status]); return {id, partNumber:q.partNumber, quantity:q.quantity, createdAt:created_at, status}; }, async markAnalyzed(id:ID){ await pool.query('UPDATE quotes SET status=$2 WHERE id=$1',[id,'ANALYZED']); } });
export const PostgresOrderRepo=():OrderRepo=>({ async get(id:ID){ const r=await pool.query('SELECT id, quote_id, supplier_id, price_cents, created_at, status FROM orders WHERE id=$1',[id]); if(r.rowCount===0) return null; const row=r.rows[0]; return {id:row.id, quoteId:row.quote_id, supplierId:row.supplier_id, priceCents:row.price_cents, createdAt:row.created_at, status:row.status}; }, async create(o){ const id=randomUUID(); const created_at=new Date(); const status='PLACED'; await pool.query('INSERT INTO orders (id, quote_id, supplier_id, price_cents, created_at, status) VALUES ($1,$2,$3,$4,$5,$6)',[id,o.quoteId,o.supplierId,o.priceCents,created_at,status]); return {id, quoteId:o.quoteId, supplierId:o.supplierId, priceCents:o.priceCents, createdAt:created_at, status}; } });
