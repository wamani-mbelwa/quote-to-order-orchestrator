import express from 'express'; import cors from 'cors'; import helmet from 'helmet'; import { ApolloServer } from '@apollo/server'; import { expressMiddleware } from '@apollo/server/express4'; import bodyParser from 'body-parser'; import { typeDefs } from '../adapters/inbound/graphql/schema.js'; import { buildResolvers } from '../adapters/inbound/graphql/resolvers.js'; import { cache as redisCache } from '../infrastructure/cache/redis.js'; import { bus } from '../infrastructure/bus/eventbridge.js'; import { queue } from '../infrastructure/queue/sqs.js'; import { PostgresQuoteRepo, PostgresOrderRepo } from '../adapters/outbound/rds/postgresRepos.js'; import { config } from '../infrastructure/config/index.js'; import { logger } from '../infrastructure/logging/logger.js'; async function main(){ const app=express(); app.use(helmet()); app.use(cors()); app.use(bodyParser.json({limit:'1mb'})); const server=new ApolloServer({ typeDefs, resolvers: buildResolvers({ quotes: PostgresQuoteRepo(), orders: PostgresOrderRepo(), cache: redisCache, bus, queue }) }); await server.start(); app.use('/graphql', expressMiddleware(server)); app.get('/healthz',(_req,res)=>res.json({ok:true})); app.get('/readyz',(_req,res)=>res.json({ready:true})); app.listen({port:config.port},()=>{ logger.info(`GraphQL running at http://localhost:${config.port}/graphql`); }); } main().catch((err)=>{ console.error(err); process.exit(1); });
